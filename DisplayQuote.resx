<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        E2UAAAAASUVORK5CYII=
</value>
  </data>
</root>